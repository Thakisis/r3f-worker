/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 --transform .\MC.glb .\MC.glb -t 
Files: .\MC.glb [538.2KB] > C:\discord\r3f-worker\public\public\MC-transformed.glb [28.69KB] (95%)
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { MeshTransmissionMaterial, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useControls } from 'leva'

type ActionName = ""
type GLTFAction = Record<ActionName, THREE.AnimationAction>;
type GLTFResult = GLTF & {
  nodes: {
    McLogo: THREE.Mesh
  }
  materials: {
    MCLogo: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function MC(props: JSX.IntrinsicElements['group']) {

  const { stripes, environment, saturation, shadow, ...config } = useControls({
    saturation: { value: -1, min: -1, max: 0 },
    environment: true,
    backside: true,
    backsideThickness: { value: 0.3, min: 0, max: 1, step: 0.01 },
    thickness: { value: 0.15, min: 0, max: 30, step: 0.01 },
    samples: { value: 6, min: 1, max: 32, step: 1 },
    transmission: { value: 0.6, min: 0, max: 1 },
    clearcoat: { value: 1, min: 0.1, max: 1 },
    clearcoatRoughness: { value: 0.5, min: 0, max: 1 },
    chromaticAberration: { value: 1, min: 0, max: 5 },
    anisotropy: { value: 0.2, min: 0, max: 1, step: 0.01 },
    roughness: { value: 0, min: 0, max: 1, step: 0.01 },
    distortion: { value: 0, min: 0, max: 4, step: 0.01 },
    distortionScale: { value: 0.09, min: 0.01, max: 1, step: 0.01 },
    temporalDistortion: { value: 0.0, min: 0, max: 1, step: 0.01 },
    ior: { value: 1.5, min: 0, max: 2, step: 0.01 },
    color: '#ff9cf5',
    stripes: '#444',
    shadow: 'black'
  })
  const { nodes, materials } = useGLTF('/Models/MC-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.McLogo.geometry}  >
        <MeshTransmissionMaterial {...config} backside={config.backside} />
      </mesh>

    </group>
  )
}

useGLTF.preload('/models/MC-transformed.glb')
